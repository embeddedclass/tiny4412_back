========================================================================
			Develop Environment Setting
========================================================================

1 )  install gtkterm
	sudo apt-get install gtkterm

2 )  install toolchan
	a ) tar arm-linux-gcc-4.5.1-v6-vfp-20120301.tgz  -C ./
	b ) mv ./opt/FriendlyARM  /op/

3 ) setting toolchain
	source set_arm_4412_toolchain_path.sh


========================================================================
				Prepare Tiny4412 BSP
========================================================================

1 ) Extra U-boot source
	tar -xvjf uboot_tiny4412.tar.bz2

2 ) Extra Linux kernel source
	tar -xvjf linux_3.5.0_tiny4412.tar.bz2

3 ) Extra ROOTFS
	tar -xvjf root_mkfs.tar.bz2



========================================================================
			set_arm_4412_toolchain_path.sh
========================================================================

#!/bin/sh 
PATH=$PATH:/opt/FriendlyARM/toolschain/4.5.1/bin 

export CROSS_COMPILE=arm-none-linux-gnueabi- 
export ARCH=arm 

How to check toolchain

Execute below command in prompt command :
#arm-none-linux-gnueabi-gcc -v

Using built-in specs. 
COLLECT_GCC=arm-none-linux-gnueabi-gcc 
COLLECT_LTO_WRAPPER=/opt/FriendlyARM/toolschain/4.5.1/libexec/gcc/arm-none-linux-gnueabi/4.5.1/lto-wrapper 
Target: arm-none-linux-gnueabi 
Configured with: /work/toolchain/build/src/gcc-4.5.1/configure --build=i686-build_pc-linux-gnu --host=i686-build_pc-linux-gnu --target=arm-none-linux-gnueabi --prefix=/opt/FriendlyARM/toolschain/4.5.1 --with-sysroot=/opt/FriendlyARM/toolschain/4.5.1/arm-none-linux-gnueabi/sys-root --enable-languages=c,c++ --disable-multilib --with-cpu=arm1176jzf-s --with-tune=arm1176jzf-s --with-fpu=vfp --with-float=softfp --with-pkgversion=ctng-1.8.1-FA --with-bugurl=http://www.arm9.net/ --disable-sjlj-exceptions --enable-__cxa_atexit --disable-libmudflap --with-host-libstdcxx='-static-libgcc -Wl,-Bstatic,-lstdc++,-Bdynamic -lm' --with-gmp=/work/toolchain/build/arm-none-linux-gnueabi/build/static --with-mpfr=/work/toolchain/build/arm-none-linux-gnueabi/build/static --with-ppl=/work/toolchain/build/arm-none-linux-gnueabi/build/static --with-cloog=/work/toolchain/build/arm-none-linux-gnueabi/build/static --with-mpc=/work/toolchain/build/arm-Using built-in specs. 
COLLECT_GCC=arm-none-linux-gnueabi-gcc 
COLLECT_LTO_WRAPPER=/opt/FriendlyARM/toolschain/4.5.1/libexec/gcc/arm-none-linux-gnueabi/4.5.1/lto-wrapper 
Target: arm-none-linux-gnueabi 
Configured with: /work/toolchain/build/src/gcc-4.5.1/configure --build=i686-build_pc-linux-gnu --host=i686-build_pc-linux-gnu --target=arm-none-linux-gnueabi --prefix=/opt/FriendlyARM/toolschain/4.5.1 --with-sysroot=/opt/FriendlyARM/toolschain/4.5.1/arm-none-linux-gnueabi/sys-root --enable-languages=c,c++ --disable-multilib --with-cpu=arm1176jzf-s --with-tune=arm1176jzf-s --with-fpu=vfp --with-float=softfp --with-pkgversion=ctng-1.8.1-FA --with-bugurl=http://www.arm9.net/ --disable-sjlj-exceptions --enable-__cxa_atexit --disable-libmudflap --with-host-libstdcxx='-static-libgcc -Wl,-Bstatic,-lstdc++,-Bdynamic -lm' --with-gmp=/work/toolchain/build/arm-none-linux-gnueabi/build/static --with-mpfr=/work/toolchain/build/arm-none-linux-gnueabi/build/static --with-ppl=/work/toolchain/build/arm-none-linux-gnueabi/build/static --with-cloog=/work/toolchain/build/arm-none-linux-gnueabi/build/static --with-mpc=/work/toolchain/build/arm-none-linux-gnueabi/build/static --with-libelf=/work/toolchain/build/arm-none-linux-gnueabi/build/static --enable-threads=posix --with-local-prefix=/opt/FriendlyARM/toolschain/4.5.1/arm-none-linux-gnueabi/sys-root --disable-nls --enable-symvers=gnu --enable-c99 --enable-long-long 
Thread model: posix 
gcc version 4.5.1 (ctng-1.8.1-FA) none-linux-gnueabi/build/static --with-libelf=/work/toolchain/build/arm-none-linux-gnueabi/build/static --enable-threads=posix --with-local-prefix=/opt/FriendlyARM/toolschain/4.5.1/arm-none-linux-gnueabi/sys-root --disable-nls --enable-symvers=gnu --enable-c99 --enable-long-long 
Thread model: posix 
gcc version 4.5.1 (ctng-1.8.1-FA) 



========================================================================
			Setting and Test Tool chain
========================================================================

1.#source ~/tiny4412/set_arm_4412_toolchain_path.sh.sh 

2.check toolchain : #arm-none-linux-gnueabi-gcc -v

3.teset tool chain
	a.build u-boot
		a1.#cd U-BOOT_DIR
		a2.#make tiny4412_defconfig
		a3.make -j4
		a4.check → ls u-boot.bin

	b.build Linux kernel
		a1.#cd LINUX_KERNEL_DIR
		a2.#make tiny4412_linux_defconfig
		a3.make -j4
		a4.check linux kernel image → ls arch/arm/boot/zImage

	c.build example application (hello_word.c)
		c1.#cd EXAMPLE_DIR
		c2.#make
		c3.#./hello_word
		or arm-none-linux-gnueabi-gcc hello.c ‐o hello



========================================================================
			Build DNW Transmit Application  ( Host )
========================================================================

0 ) Install library
	sudo apt-get install libusb-dev

1 ) Extract dnw.tar.gz
	tar -xvzf  dnw.tar.gz

2 ) Build DNW module 
	a ) cd dnw
	b ) make

3 ) Download file to EVB
	a ) u-boot side 
		# dnw
	b ) Host side
		sudo ./dnw FILE



========================================================================
			SD boot - Make SD boot card
========================================================================
1.find pre-build binary file

2.Below is pre-build binary file
	ls ~/tiny4412/Day1/sd_fuse/tiny4412/E4412_N.bl1.bin
	ls ~/tiny4412/Day1/sd_fuse/tiny4412/mkbl2.bin
	ls ~/tiny4412/Day1/sd_fuse/tiny4412/E4412_tzsw.bin
	ls ~/tiny4412/Day1/init_boot/U-boot.bin

3.Format SD card

	#~/tiny4412/Day1/sd_fuse/sd_fdisk /dev/sdx (/dev/sdb)

4.Run image install script
	#~/tiny4412/Day1/sd_fuse/tiny4412/sd_fusing.sh


========================================================================
				eMMC boot
========================================================================

[Host]

	8. 	sudo ~/tiny4412/Day1/dnw/dnw ~/tiny4412/Day1/init_boot/E4412_N.bl1.bin
	11. sudo ~/tiny4412/Day1/dnw/dnw ~/tiny4412/Day1/init_boot/bl2.bin
	14. sudo ~/tiny4412/Day1/dnw/dnw ~/tiny4412/Day1/init_boot/u-boot.bin
	17. sudo ~/tiny4412/Day1/dnw/dnw ~/tiny4412/Day1/init_boot/E4412_tzsw.bin

[Target]
	===============================
		if you use sd boot "mmc_device" = 1
		if you use emmc boot "mmc_device" = 0
	===============================
	sd boot -> 	setenv mmc_device 1
	eMMC 	->	setenv mmc_device 0


	===============================
	[if you done below command process before, you can bypass below ]
	
	1. fdisk -c $mmc_device 600 2048 220
	2. fatformat mmc 1:1
	3. ext3format mmc 1:2
	4. ext3format mmc 1:3
	5. ext3format mmc 1:4

	===============================

	
	6. emmc open $mmc_device

	(download and write E4412_N.bl1.bin)
	7. dnw 
	9. mmc write $mmc_device 0xc0000000 0 0x10
	(0x10 = 十進位16, 16個block, 一個block是512B, 16*512=8*1024=8KB)

	(download and write bl2.bin)
	10. dnw
	12. mmc write $mmc_device 0xc0000000 0x10 0x1C

	(download and write u-boot.bin)
	13. dnw
	15. mmc write $mmc_device 0xc0000000 0x30 0x21D
	(u-boot.bin size 270K，space is 328K. So 48th block start，write 541 blocks, 541*512B=270.5*1024 :=270K)

	(download and write E4412_tzsw.bin)	
	16. dnw
	18. mmc write $mmc_device 0xc0000000 0x2c0 0xB8
	(tzsw.bin size about 92K，space is 160K. So, 704 block start，write 184 blocks, 184*512=92*1024=92K)
		
	19. emmc close $mmc_device



========================================
		Extract rootfs
========================================
1.	#PC-linux# cd /home/cadtc/tiny4412/Day1
2.	#PC-linux# sudo tar -xvjf root_mkfs.tar.bz2



===========================================
		Download and Booting kernel Image
===========================================

Please insert microUSB first

[Host]
	2.	sudo ~/tiny4412/Day1/dnw/dnw ~/tiny4412/Day1/init_boot/Image
	6.	ifconfig ethx 192.168.0.10

[ Target ]
	1.	dnw 0xc0008000
	3.	setenv serverip 192.168.0.10
	4.	setenv ipaddr 192.168.0.20
	5.	set bootargs noinitrd init=/linuxrc root=/dev/nfs ip=192.168.0.20:192.168.0.10:192.168.0.1:255.255.255.0::eth0:on nfsroot=192.168.0.10:/home/cadtc/tiny4412/Day1/root_mkfs, ip=192.168.0.20 console=ttySAC0 lcd=S70

	6.	savenv
	7.	bootm 0xc00080000



========================================
		write kernel Image to eMMC
========================================

[ Hots ]
	2.	sudo ~/tiny4412/Day1/dnw/dnw ~/tiny4412/Day1/init_boot/Image

[ Target ]
	1.	dnw
	3.	
		movi write kernel $mmc_device 0xc0000000;

	4.
		[ boot kernel ]
		movi read kernel $mmc_device C0008000
		bootm c0008000

